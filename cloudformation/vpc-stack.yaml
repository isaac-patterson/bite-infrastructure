---
AWSTemplateFormatVersion: '2010-09-09'
Description: Outer private & public subnet resources for veni

#This section matches a key to a corresponding set of named values (strings, lists)
Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'
Parameters:
  StackName:
    Description: An Application name that will be prefixed to resource names
    Type: String
    Default: vpc-stack
  Stage:
    Type: String

Resources:
  RetailCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: False
      AutoVerifiedAttributes:
        - email
      UserPoolName: Retail Pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: False
          Required: True
        - Name: name
          AttributeDataType: String
          Mutable: True
          Required: True
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes: 
        - email
      DeviceConfiguration: 
        ChallengeRequiredOnNewDevice: True
      EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn:  arn:aws:ses:us-east-1:117468630787:identity/venitechnz@gmail.com #verified arn of sns email
          ReplyToEmailAddress: venitechnz@gmail.com
      EmailVerificationMessage: Click with code {####} please
      EmailVerificationSubject: Bite Account Verification
      UsernameAttributes: 
        - email

  RetailCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref RetailCognitoPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - https://public-stack-elb-705744411.us-east-1.elb.amazonaws.com/oauth2/idpresponse
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      AccessTokenValidity: 2
      RefreshTokenValidity: 24
      IdTokenValidity: 2
      TokenValidityUnits: 
          AccessToken: hours
          IdToken: hours
          RefreshToken: hours
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      GenerateSecret: true
  
  RetailCognitoPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: bite-retail-auth
      UserPoolId: !Ref RetailCognitoPool

  UserCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: False
      AutoVerifiedAttributes:
        - email
      UserPoolName: User Pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: False
          Required: True
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes: 
        - email
      DeviceConfiguration: 
        ChallengeRequiredOnNewDevice: True
      EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn:  arn:aws:ses:us-east-1:117468630787:identity/venitechnz@gmail.com #verified arn of sns email
          ReplyToEmailAddress: venitechnz@gmail.com
      EmailVerificationMessage: Click with code {####} please
      EmailVerificationSubject: Bite Account Verification
      UsernameAttributes: 
        - email

  UserCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserCognitoPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - https://public-stack-elb-705744411.us-east-1.elb.amazonaws.com/oauth2/idpresponse
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      AccessTokenValidity: 2
      RefreshTokenValidity: 24
      IdTokenValidity: 2
      TokenValidityUnits: 
          AccessToken: hours
          IdToken: hours
          RefreshToken: hours
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH

      PreventUserExistenceErrors: ENABLED
      GenerateSecret: true

  #used on mobile apps
  UserCognitoPoolClientNoSecret:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserCognitoPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      AccessTokenValidity: 2
      RefreshTokenValidity: 24
      IdTokenValidity: 2
      TokenValidityUnits: 
          AccessToken: hours
          IdToken: hours
          RefreshToken: hours
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  UserCognitoPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: bite-user-auth
      UserPoolId: !Ref UserCognitoPool

  ApiVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 
        !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Ref StackName     
        - Key: Project
          Value: veni api vpc
  
  #A subnet is a public subnet only if it has a Route Table that directs traffic to the Internet Gateway.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApiVPC
      CidrBlock:
        !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Public Subnet (AZ1)     
        - Key: Project
          Value: .Net Core on AWS           
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApiVPC
      CidrBlock:
        !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Public Subnet (AZ2)   
        - Key: Project
          Value: .Net Core on AWS             
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApiVPC
      CidrBlock:
        !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Private Subnet (AZ1)       
        - Key: Project
          Value: .Net Core on AWS            
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApiVPC
      CidrBlock:
        !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Private Subnet (AZ2)       
        - Key: Project
          Value: .Net Core on AWS            
  
  #An Internet Gateway (IGW) allows resources within your VPC to access the internet, and vice versa. Routing table entry allows a subnet to access the IGW.
  #If a VPC does not have an Internet Gateway, then the resources in the VPC cannot be accessed from the Internet
  IGW:
    DependsOn: ApiVPC
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${StackName} - Internet Gateway    
        - Key: Project
          Value: .Net Core on AWS             
  
  VPCGatewayAttachment:
    DependsOn: IGW
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ApiVPC
      InternetGatewayId:
        Ref: IGW

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ApiVPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Private Route     
        - Key: Project
          Value: .Net Core on AWS           

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateSubnet1RouteTable
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ApiVPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Private Route   
        - Key: Project
          Value: .Net Core on AWS          

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateSubnet2RouteTable
  #edge assosiation (connected to internet gateway). Allows incoming traffic to subnet
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ApiVPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName} Public Route        
        - Key: Project
          Value: .Net Core on AWS          
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: 
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicSubnetRouteTable
  
Outputs:    
  ApiVPC:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'ApiVPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApiVPC' ] ]
  PublicSubnet1:
    Description: Public subnet one
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet1' ] ]
  PublicSubnet2:
    Description: Public subnet two
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet2' ] ]
  PrivateSubnet1:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet1' ] ]
  PrivateSubnet2:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet2' ] ]
  PrivateSubnet1RouteTable:
    Description: Private subnet routetable one
    Value: !Ref 'PrivateSubnet1RouteTable'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet1RouteTable' ] ]
  PrivateSubnet2RouteTable:
    Description: Private subnet routetable one
    Value: !Ref 'PrivateSubnet2RouteTable'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnet2RouteTable' ] ]
  RetailCognitoPool:
    Description: The ARN of the retail cognito user pool
    Value: !GetAtt RetailCognitoPool.Arn
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'RetailCognitoPool' ] ]
  RetailCognitoPoolClient:
    Description: The ID of the retail cognito user pool client
    Value: !Ref 'RetailCognitoPoolClient'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'RetailCognitoPoolClient' ] ]
  RetailCognitoPoolDomain:
    Description: The ID of the retail cognito user pool client domain
    Value: !Ref 'RetailCognitoPoolDomain'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'RetailCognitoPoolDomain' ] ]
  UserCognitoPool:
    Description: The ARN of the user cognito user pool
    Value: !GetAtt UserCognitoPool.Arn
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserCognitoPool' ] ]
  UserCognitoPoolClient:
    Description: The ID of the user cognito user pool
    Value: !Ref 'UserCognitoPoolClient'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserCognitoPoolClient' ] ]
  UserCognitoPoolDomain:
    Description: The ID of the retail cognito user pool client domain
    Value: !Ref 'UserCognitoPoolDomain'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'UserCognitoPoolDomain' ] ]