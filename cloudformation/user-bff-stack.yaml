AWSTemplateFormatVersion: '2010-09-09'
Description: .NET WebApi AWS Fargate in ECS Service / ECS Task definition / CodeBuild / CodeDeploy
Mappings:  
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0b69ea66ff7391e80   
    us-east-2:
      HVM64: ami-00c03f7f7f2ec15c3
    us-west-1:
      HVM64: ami-0245d318c6788de52
    us-west-2:
      HVM64: ami-04b762b4289fba92b
    ap-south-1:
      HVM64: ami-0cb0e70f44e1a4bb5
      
Parameters:
  StackName:
    Description: Service stack for net-core-task
    Type: String
    Default: user-bff-stack
  Stage:
    Type: String
  ECRRepository:
    Type: String
  ECSCluster:
    Type: String
  ECSSecurityGroup:
    Type: String
  PrivateSubnet1:
    Type: String
  PrivateSubnet2:
    Type: String
  UserBFFTargetGroup:
    Type: String
  ExternalUrl:
    Type: String
  ECRURL:
    Type: String
  HTTPSListener:
    Type: String
  ContainerPort:
    Type: String
    Default: 80
  ServiceName:
    Type: String
    Default: user-bff

Resources:
  #Defines long running tasks of the same task definition
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - LoadBalancerRule
      - ECSTaskDefinition
    Properties:
      ServiceName: !Sub ${StackName}-user-bff-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  
  #user-bff task definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${StackName}
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref 'ECSRole'
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        -
          Name: !Ref ServiceName
          LogConfiguration:
            LogDriver:  awslogs
            Options:
              awslogs-group: !Ref 'ECSLogGroup'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${StackName}-logs
          Image: 
            Fn::Join:
              - ''
              - - Ref: AWS::AccountId
                - '.dkr.ecr.'
                - Ref: AWS::Region
                - '.amazonaws.com/'
                - !Sub  misc-infra-stack-ecr-user-bff:latest 
                #clean up into parameter, along with reference in misc-infra-stack and user-bff stack
          Cpu: 256
          Memory: 256
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Command:
            - "dotnet"
            - "user-bff.dll"                       

  #Target group distributes traffic from the PLB to the fargate instance
  TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: "/api/values"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 5
          UnhealthyThresholdCount: 2
          Matcher: #checks for 200 OK for healthcheck
              HttpCode: "200"
          Port: !Ref ContainerPort
          Protocol: "HTTP"
          TargetType: ip
          VpcId: !Ref ApiVPC
          Name: !Sub ${StackName}-userbff-tgt-grp
  
  #Adds listener to the PLB
  #Traffic is fowarded to the TargetGroup if the path matches
  #TO DO - add an action to the listner rule in order to authenticate users
  #https://docs.aws.amazon.com/elasticloadbalancing/latest/application/listener-authenticate-users.html
  LoadBalancerRule:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
          Priority: "1"
          ListenerArn: !Ref HTTPSListener
          Conditions: 
            - 
              Field: "path-pattern"
              Values: 
                - "/user"
          Actions: 
            - 
              Type: "forward"
              TargetGroupArn: !Ref TargetGroup

  #ECS roles & log group
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-ecs-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess 
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess 
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role  
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']          
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-taskexec-role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${StackName}-awslogs
      RetentionInDays: 30
  
  #Code Build
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${StackName}-user-bff-build
      Description: user-bff Api application codebuild project.
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        PrivilegedMode: true
        EnvironmentVariables:
            - Name: REPOSITORY_URI
              Type: PLAINTEXT
              Value: !Join ['',[!Ref ECRURL, !Ref StackName, '-ecr/']]
            - Name: AWS_DEFAULT_REGION
              Type: PLAINTEXT
              Value: 
                Ref: AWS::Region
      Source:
        BuildSpec: config/buildspec.yml
        Location: https://github.com/veni-nz/user-bff.git
        Type: GITHUB 
        Auth: 
          Type: OAUTH
          Resource: !Ref CodeBuildSourceCredentials

      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED
            - Type: HEAD_REF
              Pattern: refs/heads/master # 'master' is Branch name
      SourceVersion: refs/heads/master  
      TimeoutInMinutes: 10 

  CodeBuildSourceCredentials:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: '{{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess 
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
  CloudWatchEventsCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-cloud-watch-events-codebuild-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
      - PolicyName: aws-events-code-build
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - 'codebuild:StartBuild'
            Resource: !GetAtt CodeBuildProject.Arn
  
  #CodeDeploy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS

Outputs:
  HealthCheckUrl:
    Description: Healthcheck URL
    Value: 
       !Join ['', [!Ref ExternalUrl, '/api/values']]
  WebApiUrl:
    Description: WebApi URL
    Value:
      !Join ['', [!Ref ExternalUrl, '/api/']]

  CodeBuildName:
    Description: The name of the CodeBuild.
    Value: !Ref 'CodeBuildProject'    
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]      
  ECSTaskDefinition:
    Description: TaskDefinition for the ECS Cluster
    Value: !Ref 'ECSTaskDefinition'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskDefinition' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]