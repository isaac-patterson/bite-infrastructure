---
AWSTemplateFormatVersion: '2010-09-09'
Description: Resources in the public subnet NAT / ECS Cluster / Load Ballancer

Parameters:
  ECSDeployEnv: #not used at the moment as havnt set up dev environments
    Type: String
    Default: Dev
    AllowedValues:
    - Dev
    - Test
    - Prod
  StackName:
    Description: An Application name that will be prefixed to resource names
    Type: String
    Default: public-stack
  Stage:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1RouteTable:
    Type: String
  PrivateSubnet2RouteTable:
    Type: String
  ApiVPC:
    Type: String
  BastionHostKeyName:
    Type: String

Resources:
  # #Specifies an Elastic IP (EIP) address for natgateway
  NAT1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  #Specifies an Elastic IP (EIP) address for natgateway
  NAT2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  #internet cannot get through NAT gateway explicitily allowed, mostly used for outbound traffic
  #can be used for other things aswell: eg.  yum updates, external database connections, wget calls, etc
  #private subnets connected to natgateway
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT1EIP  
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  PrivateSubnetNATGateway1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  
  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
  PrivateSubnetNATGateway2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  #Acts as a firewall for the PLB, controls both inbound traffic
  PLBSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: Access to the public facing load balancer
          GroupName: !Sub ${StackName}-elb-sg
          VpcId: !Ref ApiVPC
          #allows any access from internet on ports 80 or 443, all port 80 requests redirect to 443
          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443

  #distributes incoming application traffic to ec2 instances
  PublicLoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
          Name: !Sub ${StackName}-elb
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !Ref PLBSecurityGroup
          IpAddressType: "ipv4"

  # A listener checks for connection requests using a specified protocol and port. 
  # The rules that you define for a listener determine how the load balancer routes requests to its registered targets.
  HTTPSListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 443
          Protocol: "HTTPS"
          SslPolicy: "ELBSecurityPolicy-2016-08"
          Certificates: 
            - 
              CertificateArn: arn:aws:acm:us-east-1:117468630787:certificate/5cd10a6a-ff2f-41c8-9203-e3fa310a7a74
          
          # Returns a 400 if no rules are met
          DefaultActions: 
            - 
              Type: "fixed-response"
              FixedResponseConfig: 
                ContentType: text/plain
                MessageBody: So close!
                StatusCode: 400

  #redirects all http traffic to https listener
  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 80
          Protocol: "HTTP"
          DefaultActions: 
            - 
              Order: 1
              RedirectConfig: 
                  Protocol: "HTTPS"
                  Port: "443"
                  Host: "#{host}"
                  Path: "/#{path}"
                  Query: "#{query}"
                  StatusCode: "HTTP_301"
              Type: "redirect"

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for bastion host
      VpcId: !Ref ApiVPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName} (BastionHostSG)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          Description: SSH Service port
          CidrIp: 27.252.220.66/32
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          Description: All TCP/UDP port opened for bastion host to access external network

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      InstanceType: t3.micro
      KeyName: !Ref 'BastionHostKeyName'
      SecurityGroupIds: 
        - !Ref 'BastionHostSecurityGroup'
      ImageId: ami-0ff8a91507f77f867
      Tenancy: 'default'
      Tags:
        - Key: Name
          Value: !Sub ${StackName} (BastionHost)

  BastionHostEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      InstanceId: !Ref BastionHost

Outputs:  
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  PLBSecurityGroup:
    Description: loadbalancer security group
    Value: !Ref PLBSecurityGroup
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'PLBSecurityGroup' ] ]
  HTTPSListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref HTTPSListener
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'HTTPSListener' ] ]
  BastionHostSecurityGroup:
    Description: Bastion host security group
    Value: !Ref BastionHostSecurityGroup
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'BastionHostSecurityGroup' ] ]