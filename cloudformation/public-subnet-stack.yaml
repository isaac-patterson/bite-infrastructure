---
AWSTemplateFormatVersion: '2010-09-09'
Description: Resources in the public subnet NAT / ECS Cluster / Load Ballancer

Parameters:
  ECSDeployEnv: #not used at the moment as havnt set up dev environments
    Type: String
    Default: Dev
    AllowedValues:
    - Dev
    - Test
    - Prod
  StackName:
    Description: An Application name that will be prefixed to resource names
    Type: String
    Default: public-stack
  Stage:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PrivateSubnet1RouteTable:
    Type: String
  PrivateSubnet2RouteTable:
    Type: String
  ApiVPC:
    Type: String

Resources:
  
  # #Specifies an Elastic IP (EIP) address for natgateway
  NAT1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  #Specifies an Elastic IP (EIP) address for natgateway
  NAT2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # #internet cannot get through NAT gateway explicitily allowed, mostly used for outbound traffic
  # #can be used for other things aswell: eg.  yum updates, external database connections, wget calls, etc
  # #private subnets connected to natgateway
  # NATGateway1:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - NAT1EIP
  #       - AllocationId
  #     SubnetId: !Ref PublicSubnet1
  # PrivateSubnetNATGateway1Route:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateSubnet1RouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: NATGateway1
  
  # NATGateway2:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #       - NAT2EIP
  #       - AllocationId
  #     SubnetId: !Ref PublicSubnet2
  # PrivateSubnetNATGateway2Route:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateSubnet2RouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: NATGateway2

  #ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${StackName}-ecs-cluster
      Tags:
        - Key: Name
          Value: !Sub ${StackName} ECS Cluster
        - Key: Project
          Value: veni cluster       

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${StackName}-ecs-app-sg
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref ApiVPC
  
  #this ingress allows inbound traffic to ECS services from all private IP addresses of the network interfaces assosiated with the source security group
  #in this case from the public load ballancer
  #every ec2 instance must have a security group

  ECSSecurityGroupIngressTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress TCP All Port from ELB SG
      GroupId: !Ref 'ECSSecurityGroup'
      IpProtocol: tcp
      FromPort: 1
      ToPort: 65535
      SourceSecurityGroupId: !Ref 'PLBSecurityGroup'

  #Acts as a firewall for the PLB, controls both inbound traffic
  PLBSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: Access to the public facing load balancer
          GroupName: !Sub ${StackName}-elb-sg
          VpcId: !Ref ApiVPC
          #allows any access from internet on ports 80 or 443, all port 80 requests redirect to 443
          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443

  #distributes incoming application traffic to ec2 instances
  PublicLoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
          Name: !Sub ${StackName}-elb
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !Ref PLBSecurityGroup
          IpAddressType: "ipv4"

  # A listener checks for connection requests using a specified protocol and port. 
  # The rules that you define for a listener determine how the load balancer routes requests to its registered targets.
  HTTPSListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 443
          Protocol: "HTTPS"
          SslPolicy: "ELBSecurityPolicy-2016-08"
          Certificates: 
            - 
              CertificateArn: arn:aws:acm:us-east-1:117468630787:certificate/c5c11580-5bc8-4736-8efe-97e7ccfd397b
          
          # Returns a 400 if no rules are met
          DefaultActions: 
            - 
              Type: "fixed-response"
              FixedResponseConfig: 
                ContentType: text/plain
                MessageBody: So close!
                StatusCode: 400

  #redirects all http traffic to https listener
  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref PublicLoadBalancer
          Port: 80
          Protocol: "HTTP"
          DefaultActions: 
            - 
              Order: 1
              RedirectConfig: 
                  Protocol: "HTTPS"
                  Port: "443"
                  Host: "#{host}"
                  Path: "/#{path}"
                  Query: "#{query}"
                  StatusCode: "HTTP_301"
              Type: "redirect"

Outputs:
  ECSCluster:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ECSCluster' ]]       
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  ECSSecurityGroup:
    Description: ECSSecurityGroup for the loadbalancer
    Value: !Ref 'ECSSecurityGroup'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ECSSecurityGroup' ] ]
  HTTPSListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref HTTPSListener
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'HTTPSListener' ] ]      